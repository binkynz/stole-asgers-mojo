// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: campsites.sql

package sqlc

import (
	"context"
)

const getCampsite = `-- name: GetCampsite :one
SELECT
    id, asset_id, status, name, region, x, y
FROM
    doc.campsite
WHERE
    id = $1
`

func (q *Queries) GetCampsite(ctx context.Context, id int32) (DocCampsite, error) {
	row := q.db.QueryRow(ctx, getCampsite, id)
	var i DocCampsite
	err := row.Scan(
		&i.ID,
		&i.AssetID,
		&i.Status,
		&i.Name,
		&i.Region,
		&i.X,
		&i.Y,
	)
	return i, err
}

const getCampsites = `-- name: GetCampsites :many
SELECT
    id, asset_id, status, name, region, x, y
FROM
    doc.campsite
WHERE
    id = $1
ORDER BY
    id
LIMIT $2
`

type GetCampsitesParams struct {
	ID  int32
	Lim int32
}

func (q *Queries) GetCampsites(ctx context.Context, arg GetCampsitesParams) ([]DocCampsite, error) {
	rows, err := q.db.Query(ctx, getCampsites, arg.ID, arg.Lim)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []DocCampsite
	for rows.Next() {
		var i DocCampsite
		if err := rows.Scan(
			&i.ID,
			&i.AssetID,
			&i.Status,
			&i.Name,
			&i.Region,
			&i.X,
			&i.Y,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const upsertCampsites = `-- name: UpsertCampsites :exec
INSERT INTO doc.campsite (asset_id, status, name, region, x, y)
SELECT
    UNNEST($1::integer[]),
    UNNEST($2::text[]),
    UNNEST($3::text[]),
    UNNEST($4::text[]),
    UNNEST($5::float[]),
    UNNEST($6::float[])
ON CONFLICT (asset_id)
    DO UPDATE SET
        asset_id = EXCLUDED.asset_id,
        status = EXCLUDED.status,
        name = EXCLUDED.name,
        region = EXCLUDED.region,
        x = EXCLUDED.x,
        y = EXCLUDED.y
`

type UpsertCampsitesParams struct {
	AssetIds []int32
	Statuses []string
	Names    []string
	Regions  []string
	Xs       []float64
	Ys       []float64
}

func (q *Queries) UpsertCampsites(ctx context.Context, arg UpsertCampsitesParams) error {
	_, err := q.db.Exec(ctx, upsertCampsites,
		arg.AssetIds,
		arg.Statuses,
		arg.Names,
		arg.Regions,
		arg.Xs,
		arg.Ys,
	)
	return err
}
